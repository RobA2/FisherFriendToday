local a,b=...local c=CreateFrame('Frame')local d={}local e;if b:IsRetail()then e=C_EventUtils.IsEventValid else local f=CreateFrame('Frame')function e(g)local h=pcall(f.RegisterEvent,f,g)if h then f:UnregisterEvent(g)end;return h end end;local i=CreateFrame('Frame')local function j(g,k)local h=pcall(i.RegisterUnitEvent,i,g,k)if h then i:UnregisterEvent(g)end;return h end;local l=CreateFrame('Frame')local function m(k)if l:RegisterUnitEvent('UNIT_HEALTH',k)then local n,o=l:IsEventRegistered('UNIT_HEALTH')l:UnregisterEvent('UNIT_HEALTH')return not not o end end;local p={}function p:RegisterEvent(g,q)assert(e(g),'arg1 must be an event')assert(type(q)=='function','arg2 must be a function')if not d[g]then d[g]={}end;table.insert(d[g],{callback=q,owner=self})if not c:IsEventRegistered(g)then c:RegisterEvent(g)end end;function p:UnregisterEvent(g,q)assert(e(g),'arg1 must be an event')assert(type(q)=='function','arg2 must be a function')if d[g]then for r,s in next,d[g]do if s.owner==self and s.callback==q then d[g][r]=nil;break end end;if#d[g]==0 then c:UnregisterEvent(g)end end end;function p:UnregisterAllEvents(q)assert(type(q)=='function','arg1 must be a function')for g,t in next,d do for n,s in next,t do if s.owner==self and s.callback==q then self:UnregisterEvent(g,q)end end end end;function p:IsEventRegistered(g,q)assert(e(g),'arg1 must be an event')assert(type(q)=='function','arg2 must be a function')if d[g]then for n,s in next,d[g]do if s.callback==q then return true end end end end;function p:TriggerEvent(g,...)if d[g]then for n,s in next,d[g]do local u,v=pcall(s.callback,s.owner,...)if not u then error(v)elseif v then p.UnregisterEvent(s.owner,g,s.callback)end end end end;c:SetScript('OnEvent',function(n,g,...)p:TriggerEvent(g,...)end)local w={}local function x(k)if not w[k]then local y=CreateFrame('Frame')y:SetScript('OnEvent',function(n,g,...)p:TriggerUnitEvent(g,k,...)end)w[k]=y end;return w[k]end;local z={}function p:RegisterUnitEvent(g,...)assert(e(g),'arg1 must be an event')local q=select(select('#',...),...)assert(type(q)=='function','last argument must be a function')for A=1,select('#',...)-1 do local k=select(A,...)assert(m(k),'arg'..A+1 ..' must be a valid unit')assert(j(g,k),'event "'..g..'" is not valid for the given unit')if not z[k]then z[k]={}end;if not z[k][g]then z[k][g]={}end;table.insert(z[k][g],{callback=q,owner=self})local y=x(k)local B,o=y:IsEventRegistered(g)if not B then y:RegisterUnitEvent(g,k)elseif o~=k then error('unit event somehow registered with the wrong unit')end end end;function p:UnregisterUnitEvent(g,...)assert(e(g),'arg1 must be an event')local q=select(select('#',...),...)assert(type(q)=='function','last argument must be a function')for A=1,select('#',...)-1 do local k=select(A,...)assert(m(k),'arg'..A+1 ..' must be a valid unit')assert(j(g,k),'event is not valid for the given unit')if z[k]and z[k][g]then for r,s in next,z[k][g]do if s.owner==self and s.callback==q then z[k][g][r]=nil;break end end;if#z[k][g]==0 then x(k):UnregisterEvent(g)end end end end;function p:IsUnitEventRegistered(g,...)assert(e(g),'arg1 must be an event')local q=select(select('#',...),...)assert(type(q)=='function','last argument must be a function')for A=1,select('#',...)-1 do local k=select(A,...)assert(m(k),'arg'..A+1 ..' must be a valid unit')assert(j(g,k),'event is not valid for the given unit')if z[k]and z[k][g]then for n,s in next,z[k][g]do if s.callback==q then return true end end end end end;function p:TriggerUnitEvent(g,k,...)if z[k]and z[k][g]then for n,s in next,z[k][g]do local u,v=pcall(s.callback,s.owner,...)if not u then error(v)elseif v then p.UnregisterUnitEvent(s.owner,g,k,s.callback)end end end end;local C={}function p:RegisterCombatEvent(g,q)assert(type(g)=='string','arg1 must be a string')assert(type(q)=='function','arg2 must be a function')if not C[g]then C[g]={}end;table.insert(C[g],{callback=q,owner=self})if not self:IsEventRegistered('COMBAT_LOG_EVENT_UNFILTERED',self.TriggerCombatEvent)then self:RegisterEvent('COMBAT_LOG_EVENT_UNFILTERED',self.TriggerCombatEvent)end end;function p:UnregisterCombatEvent(g,q)assert(type(g)=='string','arg1 must be a string')assert(type(q)=='function','arg2 must be a function')if C[g]then for r,s in next,C[g]do if s.owner==self and s.callback==q then C[g][r]=nil;break end end end end;do local function D(n,g,n,...)if C[g]then for n,s in next,C[g]do local u,v=pcall(s.callback,s.owner,...)if not u then error(v)elseif v then p.UnregisterCombatEvent(s.owner,g,s.callback)end end end end;function p:TriggerCombatEvent()D(CombatLogGetCurrentEventInfo())end end;b.eventMixin=p;b=setmetatable(b,{__newindex=function(E,F,G)if F=='OnLoad'then b:RegisterEvent('ADDON_LOADED',function(self,H)if H==a then local u,v=pcall(G,self)if not u then error(v)end;return true end end)elseif F=='OnLogin'then b:RegisterEvent('PLAYER_LOGIN',function(self)local u,v=pcall(G,self)if not u then error(v)end;return true end)elseif e(F)then p.RegisterEvent(E,F,G)else rawset(E,F,G)end end,__index=function(E,F)if e(F)then return function(n,...)p.TriggerEvent(E,F,...)end else return rawget(E,F)end end})Mixin(b,p)