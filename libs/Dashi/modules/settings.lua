local a,b=...local function c(d,e)b:TriggerOptionCallback(d.variableKey,e)end;local f;do local g={}function g:SetDefaultsHandler(h)local i=self:GetParent().Header.DefaultsButton;i:Show()i:SetScript('OnClick',h)end;function f(j)local k=CreateFrame('Frame')local l=CreateFrame('Frame',nil,k)l:SetPoint('TOPLEFT')l:SetPoint('TOPRIGHT')l:SetHeight(50)k.Header=l;local m=l:CreateFontString(nil,'ARTWORK','GameFontHighlightHuge')m:SetPoint('TOPLEFT',7,-22)m:SetJustifyH('LEFT')m:SetText(string.format('%s - %s',a,j))l.Title=m;local n=CreateFrame('Button',nil,l,'UIPanelButtonTemplate')n:SetPoint('TOPRIGHT',-36,-16)n:SetSize(96,22)n:SetText(SETTINGS_DEFAULTS)n:Hide()l.DefaultsButton=n;local o=l:CreateTexture(nil,'ARTWORK')o:SetPoint('TOP',0,-50)o:SetAtlas('Options_HorizontalDivider',true)local p=Mixin(CreateFrame('Frame',nil,k),g)p:SetPoint('BOTTOMLEFT',0,5)p:SetPoint('BOTTOMRIGHT',-12,5)p:SetPoint('TOP',0,-56)return k,p end end;local q;do local r={}function r:OnSettingValueChanged(d,e)local s,t,u,v=b:CreateColor(e):GetRGBA()self.Swatch:SetColorRGB(s,t,u)self.colorInfo.r=s;self.colorInfo.g=t;self.colorInfo.b=u;self.colorInfo.a=v end;local function w(self)local x=self:GetParent()local y=x.colorInfo;if y.hasOpacity then x.oldValue=CreateColor(y.r,y.g,y.b,y.a):GenerateHexColor()else x.oldValue=CreateColor(y.r,y.g,y.b):GenerateHexColorNoAlpha()end;ColorPickerFrame:SetupColorPickerAndShow(y)end;local function z(self,d)local s,t,u=ColorPickerFrame:GetColorRGB()if self.colorInfo.hasOpacity then local v=ColorPickerFrame:GetColorAlpha()d:SetValue(CreateColor(s,t,u,v):GenerateHexColor())else d:SetValue(CreateColor(s,t,u):GenerateHexColorNoAlpha())end end;local function A(self,d)d:SetValue(self.oldValue)end;local function B(C,self)SettingsListElementMixin.OnLoad(self)SettingsListElementMixin.Init(self,C)Mixin(self,r)self:SetSize(280,26)self.Swatch=CreateFrame('Button',nil,self,'ColorSwatchTemplate')self.Swatch:SetSize(30,30)self.Swatch:SetPoint('LEFT',self,'CENTER',-80,0)self.Swatch:SetScript('OnClick',w)local d=C:GetSetting()local e=d:GetValue()local s,t,u,v=b:CreateColor(e):GetRGBA()self.colorInfo={swatchFunc=GenerateClosure(z,self,d),opacityFunc=GenerateClosure(z,self,d),cancelFunc=GenerateClosure(A,self,d),r=s,g=t,b=u,opacity=v,hasOpacity=#e==8}self.Swatch:SetColorRGB(s,t,u)self.cbrHandles:SetOnValueChangedCallback(d:GetVariable(),self.OnSettingValueChanged,self)end;function q(D,d,E,F)local G=Settings.CreateSettingInitializerData(d,E,F)local H=Settings.CreateElementInitializer('SettingsListElementTemplate',G)H.InitFrame=B;H:AddSearchTags(d:GetName())SettingsPanel:GetLayout(D):AddInitializer(H)return H end end;local function I(J,e)return J:format(e)end;local function K(D,L,y)b:ArgCheck(y.key,3,'string')b:ArgCheck(y.title,3,'string')b:ArgCheck(y.type,3,'string')b:ArgCheck(y.requires,3,'string','nil')assert(y.default~=nil,"default must be set")local M=L..'_'..y.key;local d=Settings.RegisterAddOnSetting(D,M,y.key,_G[L],type(y.default),y.title,y.default)local C;if y.type=='toggle'then C=Settings.CreateCheckbox(D,d,y.tooltip)elseif y.type=='slider'then b:ArgCheck(y.minValue,3,'number')b:ArgCheck(y.maxValue,3,'number')b:ArgCheck(y.valueFormat,3,'string','function')local E=Settings.CreateSliderOptions(y.minValue,y.maxValue,y.valueStep or 1)if type(y.valueFormat)=='string'then E:SetLabelFormatter(MinimalSliderWithSteppersMixin.Label.Right,GenerateClosure(I,y.valueFormat))elseif type(y.valueFormat)=='function'then E:SetLabelFormatter(MinimalSliderWithSteppersMixin.Label.Right,y.valueFormat)end;C=Settings.CreateSlider(D,d,E,y.tooltip)elseif y.type=='menu'then b:ArgCheck(y.options,3,'table')local E=function()local N=Settings.CreateControlTextContainer()for O,P in next,y.options do N:Add(P.value,P.label)end;return N:GetData()end;C=Settings.CreateDropdown(D,d,E,y.tooltip)elseif y.type=='color'or y.type=='colorpicker'then C=q(D,d,nil,y.tooltip)else error('type is invalid')return end;if y.firstInstall then _G[L][y.key..'_seen']=true elseif not _G[L][y.key..'_seen']then local Q=GetBuildInfo()if not NewSettings[Q]then NewSettings[Q]={}end;table.insert(NewSettings[Q],M)EventRegistry:RegisterCallback('Settings.CategoryChanged',function(O,R)if R==D and not _G[L][y.key..'_seen']then _G[L][y.key..'_seen']=true;local S;for T,U in next,NewSettings[Q]do if U==M then S=T;break end end;if S then table.remove(NewSettings[Q],S)end end end)end;d:SetValueChangedCallback(c)b:TriggerOptionCallback(y.key,d:GetValue())return C end;local function V(W)return not not W:GetSetting():GetValue()end;local function X()return true end;local function Y(L,Z)local _=C_AddOns.GetAddOnMetadata(a,'Title')local D=Settings.RegisterVerticalLayoutCategory(_)Settings.RegisterAddOnCategory(D)local a0;if not _G[L]then _G[L]={}a0=true end;local a1={}local a2={}local a3=b.T{}local a4=b.T{}for T,d in next,Z do if a0 then d.firstInstall=true end;local C=K(D,L,d)a1[d.key]=T;a2[d.key]=C;if d.requires then a3[d.key]=d.requires elseif d.parent then a4[d.key]=d.parent end end;if a3:size()>0 then for U,a5 in next,a3 do assert(not not a1[a5],string.format("setting '%s' can't depend on invalid setting '%s'",U,a5))assert(Z[a1[a5]].type=='toggle',string.format("setting '%s' can't depend on a non-toggle setting",U))a2[U]:SetParentInitializer(a2[a5],GenerateClosure(V,a2[a5]))end end;if a4:size()>0 then for U,x in next,a4 do assert(not not a1[x],string.format("setting '%s' can't depend on invalid setting '%s'",U,x))a2[U]:SetParentInitializer(a2[x],X)end end;for O,y in next,b.settingsChildren do if y.settings then local a6=Settings.RegisterVerticalLayoutSubcategory(D,y.name)for O,d in next,y.settings do K(a6,L,d)end;Settings.RegisterAddOnCategory(a6)elseif y.callback then local k,p=f(y.name)local a6=Settings.RegisterCanvasLayoutSubcategory(D,k,y.name)Settings.RegisterAddOnCategory(a6)local a7;SettingsPanel:HookScript('OnShow',function()if not a7 then y.callback(p)a7=true end end)end end end;function b:RegisterSettings(L,Z)b:ArgCheck(L,1,'string')b:ArgCheck(Z,2,'table')assert(not self.registeredVariables,"can't register settings more than once")self.registeredVariables=L;if not self.settingsChildren then self.settingsChildren={}end;local O,a8=C_AddOns.IsAddOnLoaded(a)if a8 then Y(L,Z)else b:RegisterEvent('ADDON_LOADED',function(O,j)if j==a then Y(L,Z)return true end end)end end;function b:RegisterSubSettings(j,Z)b:ArgCheck(j,1,'string')b:ArgCheck(Z,2,'table')assert(not not self.settingsChildren,"can't register sub-settings without root settings")assert(not self.settingsChildren[j],"can't register two sub-settings with the same name")self.settingsChildren[j]={name=j,settings=Z}end;function b:RegisterSubSettingsCanvas(j,h)b:ArgCheck(j,1,'string')b:ArgCheck(h,2,'function')assert(not not self.settingsChildren,"can't register sub-settings without root settings")assert(not self.settingsChildren[j],"can't register two sub-settings with the same name")self.settingsChildren[j]={name=j,callback=h}end;function b:RegisterSettingsSlash(...)local G={...}table.insert(G,function()local a9;local _=C_AddOns.GetAddOnMetadata(a,'Title')for O,D in next,SettingsPanel:GetAllCategories()do if D.name==_ then assert(not a9,'found multiple instances of the same category')a9=D:GetID()end end;Settings.OpenToCategory(a9)end)b:RegisterSlash(unpack(G))end;function b:GetOption(U)b:ArgCheck(U,1,'string')assert(b:AreOptionsLoaded(),"options aren't loaded")assert(_G[self.registeredVariables][U]~=nil,"key doesn't exist")return _G[self.registeredVariables][U]end;function b:SetOption(U,e)b:ArgCheck(U,1,'string')assert(b:AreOptionsLoaded(),"options aren't loaded")assert(_G[self.registeredVariables][U]~=nil,"key doesn't exist")_G[self.registeredVariables][U]=e;b:TriggerOptionCallback(U,e)end;function b:AreOptionsLoaded()return not not self.registeredVariables and not not _G[self.registeredVariables]end;function b:RegisterOptionCallback(U,h)b:ArgCheck(U,1,'string')b:ArgCheck(h,2,'function')if not self.settingsCallbacks then self.settingsCallbacks={}end;if not self.settingsCallbacks[U]then self.settingsCallbacks[U]={}end;table.insert(self.settingsCallbacks[U],h)end;function b:TriggerOptionCallback(U,e)b:ArgCheck(U,1,'string')if self.settingsCallbacks and self.settingsCallbacks[U]then for O,h in next,self.settingsCallbacks[U]do local aa,ab=pcall(h,e)if not aa then error(ab)end end end end;do local function ac(k)k.slider:UnregisterCallback('OnValueChanged',k)k.slider:Release()end;local function ad(ae,j,af,ag,ah,ai,aj,ak)local al=ae:CreateButton(j):CreateFrame()if b:HasBuild(57361,110007)then al:AddResetter(ac)end;al:AddInitializer(function(k)local am=k:AttachTemplate('MinimalSliderWithSteppersTemplate')am:SetPoint('TOPLEFT',0,-1)am:SetSize(150,25)am:RegisterCallback('OnValueChanged',ag,k)am:Init(af(),ah,ai,(ai-ah)/aj,{[MinimalSliderWithSteppersMixin.Label.Right]=ak})k.slider=am;if not b:HasBuild(57361,110007)then local an=k:AttachFrame('Frame')an:SetScript('OnHide',function()ac(k)end)end;local ao=30;return am:GetWidth()+ao,am:GetHeight()end)return al end;local function ap(G)ColorPickerFrame:SetupColorPickerAndShow(G)end;local function aq(d)local s,t,u=ColorPickerFrame:GetColorRGB()if#d.default==8 then local v=ColorPickerFrame:GetColorAlpha()b:SetOption(d.key,b:CreateColor(s,t,u,v):GenerateHexColor())else b:SetOption(d.key,b:CreateColor(s,t,u):GenerateHexColorNoAlpha())end end;local function ar(d,as)local at=b:CreateColor(as)if#d.default==8 then b:SetOption(d.key,at:GenerateHexColor())else b:SetOption(d.key,at:GenerateHexColorNoAlpha())end end;local function au(d,e)return b:GetOption(d.key)==e end;local function av(d,e)b:SetOption(d.key,e)end;local function aw(L,Z)if not b.registeredVariables then if not _G[L]then _G[L]={}end;for O,d in next,Z do if _G[L][d.key]==nil then _G[L][d.key]=d.default end end;b.registeredVariables=L end;Menu.ModifyMenu('MENU_WORLD_MAP_TRACKING',function(O,ae)ae:CreateDivider()ae:CreateTitle(a:gsub('(%l)(%u)','%1 %2')..HEADER_COLON)for O,d in next,Z do if d.type=='toggle'then ae:CreateCheckbox(d.title,function()return b:GetOption(d.key)end,function()b:SetOption(d.key,not b:GetOption(d.key))end)elseif d.type=='slider'then local ak;if type(d.valueFormat)=='string'then ak=GenerateClosure(I,d.valueFormat)elseif type(d.valueFormat)=='function'then ak=d.valueFormat end;ad(ae,d.title,function()return b:GetOption(d.key)end,function(O,e)b:SetOption(d.key,e)end,d.minValue,d.maxValue,d.valueStep or 1,ak)elseif d.type=='color'then local e=b:GetOption(d.key)local s,t,u,v=b:CreateColor(e):GetRGBA()ae:CreateColorSwatch(d.title,ap,{swatchFunc=GenerateClosure(aq,d),opacityFunc=GenerateClosure(aq,d),cancelFunc=GenerateClosure(ar,d),r=s,g=t,b=u,opacity=v,hasOpacity=#e==8})elseif d.type=='menu'then local ax=ae:CreateButton(d.title)for O,P in next,d.options do ax:CreateRadio(P.label,GenerateClosure(au,d),GenerateClosure(av,d),P.value)end end end end)end;function b:RegisterMapSettings(L,Z)b:ArgCheck(L,1,'string')b:ArgCheck(Z,2,'table')local O,a8=C_AddOns.IsAddOnLoaded(a)if a8 then aw(L,Z)else b:RegisterEvent('ADDON_LOADED',function(O,j)if j==a then aw(L,Z)return true end end)end end end